import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashMap;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class ServerUI extends JFrame {

	private static final int PORT = 8888;
	private static final int FPS_MIN = 0;
	private static final int FPS_MAX = 30;
	private static final int FPS_INIT = 15; // initial frames per second
	private static final String MESSAGETOUSER = "Please go to the settings tab to map PC controls to android touch controls.";
	private String directionKeys[]= {"^ v < >", "W A S D"};
	
	private Object[][] defaultData = {
            {"Tap", "Mouse Left Button"},{"Swipe Up","X"},{"Swipe Left","B"},{"Swipe Down","C"},{"Swipe Right","V"}};
	
	private Object[][] emptyData = {
            {"Tap", "None"},{"Swipe Up","None"},{"Swipe Left","None"},{"Swipe Down","None"},{"Swipe Right","None"}};

	private JTabbedPane tabbedPane;
	private JPanel generalPane;
	private JPanel keySettingsPane;
	private JPanel testKeysPane;
	private JPanel noTiltPane;
	private JPanel tiltUpPane;
	private JPanel tiltDownPane;
	private JPanel tiltRightPane;
	private JPanel tiltLeftPane;
	private JTable table1;
	private JTable table2;
	private JTable table3;
	private JTable table4;
	private JTable table5;
	
	private HashMap<String,HashMap<String,String>> keyControls = new HashMap<String, HashMap<String,String>>(); // Tilt-> (TouchControl->PCControl)
	private static JLabel status;

	public void createServerUI() throws UnknownHostException {

		ServerUI sui = new ServerUI();
		status = new JLabel(" Connection Status: Disconnected");
		sui.createBasicUI();
		sui.setVisible(true);

	}

	private void createBasicUI() throws UnknownHostException {
		// TODO Auto-generated method stub

		setTitle("Game Controller Server");
		setSize(750, 450);

		JPanel topPanel = new JPanel();
		topPanel.setLayout(new BorderLayout());
		getContentPane().add(topPanel);

		createGeneralTab();
		createSettingsTab();
		createTestKeysTab();

		// We create a panel which will hold the UI components
		tabbedPane = new JTabbedPane();
		tabbedPane.addTab("General", generalPane);
		tabbedPane.addTab("Key Settings", keySettingsPane);
		tabbedPane.addTab("Test Keys", testKeysPane);
		topPanel.add(tabbedPane, BorderLayout.CENTER);

	}

	private void createSettingsTab() {
		// TODO Auto-generated method stub
		/*keySettingsPane = new ImagePanel(new File("Images/androidphone.jpg"));
		keySettingsPane.setLayout(new GridLayout(8, 1));
		keySettingsPane.setBorder(new EmptyBorder(10, 10, 10, 10));*/
		
		keySettingsPane = new JPanel(new BorderLayout());
		keySettingsPane.setLayout(new FlowLayout(FlowLayout.LEADING));
		keySettingsPane.setBorder(new EmptyBorder(2,2,2,2));
		
		JLabel dirControl = new JLabel("Direction Keys");
		keySettingsPane.add(dirControl);
		
		DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();
        for (String value : directionKeys) {
            model.addElement(value);
        }
        final JComboBox<String> comboBox = new JComboBox<String>(model);
        comboBox.setSize(1,1);
		keySettingsPane.add(comboBox);
		
		Image img = new ImageIcon("src/Images/androidphone.jpg").getImage();  
		Image newimg = img.getScaledInstance(300,150,java.awt.Image.SCALE_SMOOTH);  
		ImageIcon newIcon = new ImageIcon(newimg);
		
		JLabel label = new JLabel(newIcon);
		
		label.setHorizontalAlignment(JLabel.CENTER);
		label.setBorder(new EmptyBorder(10,10,10,10));
		keySettingsPane.add(label);  // default center section
		
		JLabel mouseMove = new JLabel("Mouse Control");
		keySettingsPane.add(mouseMove);
		
		DefaultComboBoxModel<String> mouseModel = new DefaultComboBoxModel<String>();
        mouseModel.addElement("Hold and Drag");
        
        JComboBox<String> comboBoxMouse = new JComboBox<String>(mouseModel);
        comboBoxMouse.setSize(1,1);
		keySettingsPane.add(comboBoxMouse);
		
		buildInnerTabs();
		
		JButton save = new JButton("Save");
		save.addActionListener(new ActionListener() {
			  public void actionPerformed(ActionEvent evt) {
				    // ... called when button clicked
				    String directionKeys= comboBox.getSelectedItem().toString();
				    String mouseControl = comboBox.getSelectedItem().toString();
				    storeMappings(table1, "No Tilt");
				    storeMappings(table2, "Tilt Up");
				    storeMappings(table3, "Tilt Down");
				    storeMappings(table4, "Tilt Right");
				    storeMappings(table5, "Tilt Left");
				    JOptionPane.showMessageDialog(null,"Direction keys: "+directionKeys+" mouse control: "+mouseControl+"\n Key Controls"+keyControls.toString());
				  }
				});
		keySettingsPane.add(save);
	}
	
	public void storeMappings(JTable table, String tabName) {
		for (int i = 0; i < table1.getRowCount(); i++) {
			String touchControl = table1.getValueAt(i, 0).toString();
			String pcControl = table1.getValueAt(i, 1).toString();
			if (!pcControl.equals("None")) {
				HashMap<String, String> hm = new HashMap<String, String>();
				hm.put(pcControl, touchControl);
				keyControls.put(tabName, hm);
			}
		}
	}

	private void buildInnerTabs() {
		// TODO Auto-generated method stub
		JTabbedPane innerTabbedPane = new JTabbedPane();
		innerTabbedPane.setPreferredSize(new Dimension(350,150));
		noTiltPane= createTiltTab(defaultData, table1);
		tiltUpPane= createTiltTab(emptyData, table2);
		tiltDownPane=createTiltTab(emptyData, table3);
		tiltRightPane=createTiltTab(emptyData, table4);
		tiltLeftPane=createTiltTab(emptyData, table5);
		
		innerTabbedPane.addTab("No Tilt", noTiltPane);
		innerTabbedPane.addTab("Tilt up", tiltUpPane);
		innerTabbedPane.addTab("Tilt down", tiltDownPane);
		innerTabbedPane.addTab("Tilt right", tiltRightPane);
		innerTabbedPane.addTab("Tilt left", tiltLeftPane);

		keySettingsPane.add(innerTabbedPane, BorderLayout.CENTER);
		
	}

	private JPanel createTiltTab(Object[][] data, JTable table) {
		// TODO Auto-generated method stub
		JPanel pane = new JPanel(new BorderLayout());
		//noTiltPane.setLayout(new GridBagLayout());
		//noTiltPane.setBorder(new EmptyBorder(2,2,2,2));
		
		String[] columnNames = {"Touch Controls",
                "PC Controls"};
		
		table = new JTable(data,columnNames){
			 public boolean getScrollableTracksViewportWidth() {
				   return getPreferredSize().width < getParent().getWidth();
				 }
				};
		JScrollPane jsp = new JScrollPane(table, 
                ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		table.setRowHeight(20);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
		pane.add(jsp);

		return pane;
	}

	private void createTestKeysTab() {
		// TODO Auto-generated method stub
		testKeysPane = new JPanel(new BorderLayout());
		testKeysPane.setLayout(new GridLayout(8, 1));
		testKeysPane.setBorder(new EmptyBorder(10, 10, 10, 10));
	}

	private void createGeneralTab() throws UnknownHostException {
		// TODO Auto-generated method stub
		generalPane = new JPanel(new BorderLayout());
		generalPane.setLayout(new GridLayout(8, 1));
		generalPane.setBorder(new EmptyBorder(10, 10, 10, 10));

		JLabel heading = new JLabel(" Server Configuration ");
		heading.setFont(new Font(heading.getName(), Font.BOLD, 20));
		generalPane.add(heading);

		JLabel ipConfig = new JLabel(" Host Name/ IP Address: "
				+ InetAddress.getLocalHost());
		generalPane.add(ipConfig);

		JLabel port = new JLabel(" Port: " + PORT);
		generalPane.add(port);

		// change this dynamically
		generalPane.add(status);

		generalPane.add(new JSeparator(SwingConstants.HORIZONTAL));

		JLabel mouseCursor = new JLabel(" Mouse Cursor Sensitivity ");
		mouseCursor.setFont(new Font(mouseCursor.getName(), Font.BOLD, 20));
		generalPane.add(mouseCursor);

		JSlider framesPerSecond = new JSlider(JSlider.HORIZONTAL, FPS_MIN,
				FPS_MAX, FPS_INIT);
		framesPerSecond.addChangeListener(new SliderListener());

		framesPerSecond.setMajorTickSpacing(10);
		framesPerSecond.setMinorTickSpacing(1);
		framesPerSecond.setPaintTicks(true);
		framesPerSecond.setPaintLabels(true);

		generalPane.add(framesPerSecond);

		JLabel msgToUser = new JLabel(MESSAGETOUSER);
		msgToUser.setFont(new Font("Serif", Font.ITALIC, 15));
		generalPane.add(msgToUser);

	}

	public void updateStatus(boolean value) {
		//TODO
		// call this function whenever a connection is made or broken
		if (value) {
			status.setText(" Connection Status: Connected");
			//System.out.println("CONNECTED");
		} else {
			status.setText(" Connection Status: Disconnected");
			//System.out.println("DISCONNECTED");
		}
	}

}

class SliderListener implements ChangeListener {

	public void stateChanged(ChangeEvent e) {
		JSlider source = (JSlider) e.getSource();
		if (!source.getValueIsAdjusting()) {
			int fps = (int) source.getValue();
			System.out.println("Slider value" + fps);
			// TODO
			// change according to mouse cursor movement
		}
	}
}
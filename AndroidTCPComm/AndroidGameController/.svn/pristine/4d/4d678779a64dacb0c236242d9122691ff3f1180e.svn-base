package com.example.gamecontrollerdatatransfer;

import gc.common_resources.CommandType;

import java.io.ObjectOutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.app.Activity;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.opengl.GLSurfaceView;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

public class PlayActivity extends Activity {

	private String ipAddress;
	Socket socket = null;
	private boolean connected = false;
	private GLSurfaceView mGLSurfaceView;
	private SensorManager mSensorManager;
	private MyRenderer mRenderer;
	private long prevTime = 0;
	private final double THRESHHOLD = 0.3;
	private final double LR_THRESHHOLD = 0.8;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);

		// Create our Preview view and set it as the content of our
		// Activity
		mRenderer = new MyRenderer();
		mGLSurfaceView = new GLSurfaceView(this);
		mGLSurfaceView.setRenderer(mRenderer);
		setContentView(R.layout.activity_play);
		/* do this in onCreate */
		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			ipAddress = extras.getString("ipAddress");
			// clientConnection();
		}
	}

	public void updateCoordinates(TouchCoordinates tc, CommandType newCommand) {
		// We don't keep a set of tc and commandtype in this class anymore
		// So this function only packs the command with fields and
		// passes the data to sendPacketToServer()
		CommandType updateCommand = newCommand;
		updateCommand.setX(tc.getX());
		updateCommand.setY(tc.getY());

		sendPacketToServer(updateCommand);
	}

	// Create the threads and pass the commands to them
	public void sendPacketToServer(CommandType updateCommand) {
		if (!connected) {
			Thread cThread = new Thread(new ClientSocketThread(updateCommand));
			cThread.start();
		}
	}

	// Thread class to send commands to the Server
	public class ClientSocketThread implements Runnable {

		private CommandType commandToSend;

		public ClientSocketThread(CommandType currCommand) {
			commandToSend = currCommand;

			Log.d("PlayActivity - ThreadConstructor", "commandToSend: "
					+ commandToSend + " " + commandToSend.getX() + " "
					+ commandToSend.getY());
		}

		public void run() {
			try {
				Socket socket = new Socket(ipAddress, 8888);
				ObjectOutputStream objOutputStream = new ObjectOutputStream(
						socket.getOutputStream());
				connected = true;

				try {
					Log.d("PlayActivity", "Sending: " + commandToSend + " "
							+ commandToSend.getX() + " " + commandToSend.getY());

					// Send the enum(commandToSend) and the fields(X and Y)
					// separately
					// as the serializing and deserializing of enum through
					// ObjectOutputStream
					// and ObjectInputStream will not save the fields in the
					// enum
					objOutputStream.writeObject(commandToSend);
					objOutputStream.writeFloat(commandToSend.getX());
					objOutputStream.writeFloat(commandToSend.getY());
				} catch (Exception e) {
					Toast.makeText(getApplicationContext(), "Unable to send commands to PC "
                            , Toast.LENGTH_SHORT).show();
					Log.e("PlayActivity", "S: Error", e);
				}
				// Close outputstream and socket
				objOutputStream.close();
				socket.close();
				connected = false;
			} catch (Exception e) {
				
				Toast.makeText(getApplicationContext(), "Unable to connect to the PC. " +
						"Please enter the IP Address again ", Toast.LENGTH_SHORT).show();
				Log.e("PlayActivity", "C: Error", e);
			}
		}
	}

	@Override
	protected void onResume() {
		// Ideally a game should implement onResume() and onPause()
		// to take appropriate action when the activity looses focus
		super.onResume();
		mRenderer.start();
		mGLSurfaceView.onResume();
	}

	@Override
	protected void onPause() {
		// Ideally a game should implement onResume() and onPause()
		// to take appropriate action when the activity looses focus
		super.onPause();
		mRenderer.stop();
		mGLSurfaceView.onPause();
	}

	class MyRenderer implements GLSurfaceView.Renderer, SensorEventListener {
		private Cube mCube;
		private Sensor mRotationVectorSensor;
		private final float[] mRotationMatrix = new float[16];

		public MyRenderer() {
			// find the rotation-vector sensor
			mRotationVectorSensor = mSensorManager
					.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR);

			mCube = new Cube();
			// initialize the rotation matrix to identity
			mRotationMatrix[0] = 1;
			mRotationMatrix[4] = 1;
			mRotationMatrix[8] = 1;
			mRotationMatrix[12] = 1;
		}

		public void start() {
			// enable our sensor when the activity is resumed, ask for
			// 10 ms updates.
			mSensorManager.registerListener(this, mRotationVectorSensor, 10000);
		}

		public void stop() {
			// make sure to turn our sensor off when the activity is paused
			mSensorManager.unregisterListener(this);
		}

		public void onSensorChanged(SensorEvent event) {	
			// we received a sensor event. it is a good practice to check
			// that we received the proper event
			if (event.sensor.getType() == Sensor.TYPE_ROTATION_VECTOR) {
				// convert the rotation-vector to a 4x4 matrix. the matrix
				// is interpreted by Open GL as the inverse of the
				// rotation-vector, which is what we want.
				SensorManager.getRotationMatrixFromVector(mRotationMatrix,
						event.values);
				float values[] = event.values;
				 System.out.println("X= "+values[0]+" Y= "+values[1]+" Z= "+values[2]);
				 // Z is for left right and Y is for up and down 
				 //if(values[2]>0.5||values[2]<0.3||values[1]<0.3||values[1]>0.5)
				 float z= values[2];
				 int send=0;
				 if(z>0.4) {
					 if(z<0.5)
						 send=30;
					 else if(z<0.6)
						 send= 60;
					 else 
						 send=30;
				 }
				 
				 else {
					 if(z<0.2)
						 send=-30;
					 else if(z<0.1)
						 send= -30;
					 else if(z<0.0)
						 send=-30;
				 }
				 System.out.println("SEnding-"+send);
				 if (System.currentTimeMillis() - prevTime > 70) {
						//updateCoordinates(new TouchCoordinates(values[1], send	), CommandType.ACCELEROMETER);
						prevTime = System.currentTimeMillis();
				}
			}
		}

		public void onDrawFrame(GL10 gl) {
			// clear screen
			gl.glClear(GL10.GL_COLOR_BUFFER_BIT);

			// set-up modelview matrix
			gl.glMatrixMode(GL10.GL_MODELVIEW);
			gl.glLoadIdentity();
			gl.glTranslatef(0, 0, -3.0f);
			gl.glMultMatrixf(mRotationMatrix, 0);

			// draw our object
			gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glEnableClientState(GL10.GL_COLOR_ARRAY);

			mCube.draw(gl);
		}

		public void onSurfaceChanged(GL10 gl, int width, int height) {
			// set view-port
			gl.glViewport(0, 0, width, height);
			// set projection matrix
			float ratio = (float) width / height;
			gl.glMatrixMode(GL10.GL_PROJECTION);
			gl.glLoadIdentity();
			gl.glFrustumf(-ratio, ratio, -1, 1, 1, 10);
		}

		public void onSurfaceCreated(GL10 gl, EGLConfig config) {
			// dither is enabled by default, we don't need it
			gl.glDisable(GL10.GL_DITHER);
			// clear screen in white
			gl.glClearColor(1, 1, 1, 1);
		}

		class Cube {
			// initialize our cube
			private FloatBuffer mVertexBuffer;
			private FloatBuffer mColorBuffer;
			private ByteBuffer mIndexBuffer;

			public Cube() {
				final float vertices[] = { -1, -1, -1, 1, -1, -1, 1, 1, -1, -1,
						1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, };

				final float colors[] = { 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0,
						1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1,
						1, };

				final byte indices[] = { 0, 4, 5, 0, 5, 1, 1, 5, 6, 1, 6, 2, 2,
						6, 7, 2, 7, 3, 3, 7, 4, 3, 4, 0, 4, 7, 6, 4, 6, 5, 3,
						0, 1, 3, 1, 2 };

				ByteBuffer vbb = ByteBuffer.allocateDirect(vertices.length * 4);
				vbb.order(ByteOrder.nativeOrder());
				mVertexBuffer = vbb.asFloatBuffer();
				mVertexBuffer.put(vertices);
				mVertexBuffer.position(0);

				ByteBuffer cbb = ByteBuffer.allocateDirect(colors.length * 4);
				cbb.order(ByteOrder.nativeOrder());
				mColorBuffer = cbb.asFloatBuffer();
				mColorBuffer.put(colors);
				mColorBuffer.position(0);

				mIndexBuffer = ByteBuffer.allocateDirect(indices.length);
				mIndexBuffer.put(indices);
				mIndexBuffer.position(0);
			}

			public void draw(GL10 gl) {
				gl.glEnable(GL10.GL_CULL_FACE);
				gl.glFrontFace(GL10.GL_CW); 
				gl.glShadeModel(GL10.GL_SMOOTH);
				gl.glVertexPointer(3, GL10.GL_FLOAT, 0, mVertexBuffer);
				gl.glColorPointer(4, GL10.GL_FLOAT, 0, mColorBuffer);
				gl.glDrawElements(GL10.GL_TRIANGLES, 36, GL10.GL_UNSIGNED_BYTE,
						mIndexBuffer);
			}
		}

		public void onAccuracyChanged(Sensor sensor, int accuracy) {
		}

	}

}
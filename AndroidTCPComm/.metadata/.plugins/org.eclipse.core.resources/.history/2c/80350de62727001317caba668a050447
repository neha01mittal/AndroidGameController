package com.example.gamecontrollerdatatransfer;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PointF;
import android.util.AttributeSet;
import android.util.SparseArray;
import android.view.MotionEvent;
import android.view.View;

public class MultiTouchView extends View {

  Context m_context;
  private static final int SIZE = 60;
  private static final int THRESHHOLD = 2;
  private String arrowKey= null;

  private SparseArray<PointF> mActivePointers;
  private Paint mPaint;
  private int[] colors = { Color.BLUE, Color.GREEN, Color.MAGENTA,
      Color.BLACK, Color.CYAN, Color.GRAY, Color.RED, Color.DKGRAY,
      Color.LTGRAY, Color.YELLOW };

  private Paint textPaint;


  public MultiTouchView(Context context, AttributeSet attrs) {
    super(context, attrs);
    m_context= context;
    initView();
  }

  private void initView() {
	  
	
    mActivePointers = new SparseArray<PointF>();
    mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
    // set painter color to a color you like
    mPaint.setColor(Color.BLUE);
    mPaint.setStyle(Paint.Style.FILL_AND_STROKE);
    textPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
    textPaint.setTextSize(20);
  }

  @Override
  public boolean onTouchEvent(MotionEvent event) {

    // get pointer index from the event object
    int pointerIndex = event.getActionIndex();

    // get pointer ID
    int pointerId = event.getPointerId(pointerIndex);

    // get masked (not specific to a pointer) action
    int maskedAction = event.getActionMasked();

    switch (maskedAction) {

    case MotionEvent.ACTION_DOWN:
    case MotionEvent.ACTION_POINTER_DOWN: {
      // We have a new pointer. Lets add it to the list of pointers

      PointF f = new PointF();
      f.x = event.getX(pointerIndex);
      f.y = event.getY(pointerIndex);
      mActivePointers.put(pointerId, f);
      break;
    }
    case MotionEvent.ACTION_MOVE: { // a pointer was moved
      for (int size = event.getPointerCount(), i = 0; i < size; i++) {
        PointF point = mActivePointers.get(event.getPointerId(i));
        if (point != null) {
          point.x = event.getX(i);
          point.y = event.getY(i);
          float x_diff = event.getX(i)- point.x;
          float y_diff = event.getY(i)- point.y;
          if(x_diff>THRESHHOLD){
        	  arrowKey="RIGHT";
          }
          else  if(y_diff>THRESHHOLD){
        	  arrowKey="UP";
        	  System.out.println("ARROW MOVEMENT"+arrowKey);
          }
          else  if(x_diff<THRESHHOLD){
        	  arrowKey="LEFT";
          }
          else  if(y_diff<THRESHHOLD){
        	  arrowKey="DOWN";
          }
        }
      }
      break;
    }
    case MotionEvent.ACTION_UP:
    case MotionEvent.ACTION_POINTER_UP:
    case MotionEvent.ACTION_CANCEL: { 
      mActivePointers.remove(pointerId);
      break;
    }
    }
    invalidate();

    return true;
  }

  @Override
  protected void onDraw(Canvas canvas) { 
    super.onDraw(canvas);

    // draw all pointers
    for (int size = mActivePointers.size(), i = 0; i < size; i++) {
      PointF point = mActivePointers.valueAt(i);
      if (point != null)
        mPaint.setColor(colors[i % 9]);
      canvas.drawCircle(point.x, point.y, SIZE, mPaint);
      System.out.println("Touch Number= "+i+" X IS "+point.x+"  Y IS "+point.y);
      System.out.println("ARROW MOVEMENT"+arrowKey);
      wrapCoordinates(point.x,point.y,i);
    }
    canvas.drawText("Total pointers: " + mActivePointers.size(), 10, 40 , textPaint);
  }
  
  public void wrapCoordinates(float x, float y, int pointCount){
	  TouchCoordinates tc = new TouchCoordinates(x, y, pointCount);
	  System.out.println("CHECKKKK at wrapCoord"+tc.getX()+" "+tc.getY()+" "+tc.getPointerCount());
		
	  if(m_context instanceof PlayActivity)
	  {
	      PlayActivity activity = (PlayActivity)m_context;
	      activity.setCoordinates(tc);
	      // Then call the method in the activity.
	  }
	  
  }

} 